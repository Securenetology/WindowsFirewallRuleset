<#
MIT License

This file is part of "Windows Firewall Ruleset" project
Homepage: https://github.com/metablaster/WindowsFirewallRuleset

Copyright (C) 2021, 2022 metablaster zebal@protonmail.ch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#>

#
# Session configuration file for Windows Firewall Ruleset
#
# Generated by: metablaster
#
# Generated on: 2.4.2021.
#
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_session_configurations
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssessionconfigurationfile
# https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_session_configuration_files
#

@{
	# Version number of the schema used for this document
	SchemaVersion = "2.0.0.0"

	# ID used to uniquely identify this document
	GUID = "d03618e8-fa6b-4172-a25c-a88feba1d1e0"

	# Author of this document
	Author = "metablaster zebal@protonmail.ch"

	# Description of the functionality provided by these settings
	Description = "Session configuration file for Windows Firewall Ruleset, remote firewall management"

	# Company associated with this document
	# The default is "Unknown"
	# CompanyName = "Unknown"

	# Copyright statement for this document
	Copyright = "Copyright (C) 2019-2022 metablaster zebal@protonmail.ch"

	# Session type defaults to apply for this session configuration:
	# "RestrictedRemoteServer", Includes only the following proxy functions:
	# Exit-PSSession, Get-Command, Get-FormatData, Get-Help, Measure-Object, Out-Default, and Select-Object
	# "Empty", No modules are added to session by default.
	# "Default" adds the Microsoft.PowerShell.Core module to the session.
	# This module includes the Import-Module cmdlet that users can use to import other modules
	SessionType = "Default"

	# Directory to place session transcripts for this session configuration
	# TranscriptDirectory = 'C:\Transcripts\'

	# Whether to run this session configuration as the machine's (virtual) administrator account
	# cannot be used with the GroupManagedServiceAccount
	RunAsVirtualAccount = $true

	# Groups associated with machine's (virtual) administrator account
	# If omitted, the virtual account belongs to Domain Admins on domain controllers and
	# Administrators on all other computers.
	# ex: RunAsVirtualAccountGroups = "Remote Desktop Users", "Remote Management Users"
	RunAsVirtualAccountGroups = "Administrators"

	# Creates a "User" PSDrive in the session for use with Copy-Item when File System provider is not visible.
	# TODO: Test if could be used for remote registry authentication instead of using New-PSDrive manually
	# $env:LOCALAPPDATA\Microsoft\Windows\PowerShell\DriveRoots\$env:USERDOMAIN_$env:USERNAME
	MountUserDrive = $true

	# Optional maximum size in bytes of user drive created with MountUserDrive parameter.
	# Default maximum size for User drive is 50MB.
	UserDriveMaximumSize = 104857600 # 100MB

	# Group managed service account name under which the configuration will run.
	# The machine where this session configuration is registered must have permission to request
	# the gMSA password in order for sessions to be created successfully.
	# GroupManagedServiceAccount = 'CONTOSO\GroupManagedServiceAccount'

	# User roles (security groups), and the role capabilities that should be applied to them when applied to a session
	# RoleDefinitions = @{ 'CONTOSO\SqlAdmins' = @{ RoleCapabilities = 'SqlAdministration' };
	# 'CONTOSO\SqlManaged' = @{ RoleCapabilityFiles = 'C:\RoleCapability\SqlManaged.psrc' };
	# 'CONTOSO\ServerMonitors' = @{ VisibleCmdlets = 'Get-Process' } }

	# Group accounts for which membership is required to use the session.
	# And = Connecting users to be members of a single group
	# Requiring users must to belong to group A, or both groups B and C:
	# @{ Or = 'GroupA', @{ And = 'GroupB', 'GroupC' } }
	RequiredGroups = @{ And = "Administrators" }

	# Language mode to apply when applied to a session:
	# FullLanguage - All language elements are permitted.
	# "ConstrainedLanguage" - Commands that contain scripts to be evaluated are not allowed.
	# restricts user access to Microsoft .NET Framework types, objects, or methods.
	# "NoLanguage" - Users may run cmdlets and functions, but are not permitted to use any language
	# elements, such as script blocks, variables, or operators.
	# "RestrictedLanguage" - Users may run cmdlets and functions, but are not permitted to use
	# script blocks or variables except for the following permitted variables:
	# $PSCulture, $PSUICulture, $True, $False, and $Null.
	# Users may use only the basic comparison operators ( -eq , -gt , -lt ).
	# Assignment statements, property references, and method calls are not permitted.
	# The default value depends on the value of the SessionType parameter:
	# Empty - NoLanguage
	# RestrictedRemoteServer - NoLanguage
	# Default - FullLanguage
	LanguageMode = "FullLanguage"

	# Execution policy to apply when applied to a session
	ExecutionPolicy = "RemoteSigned"

	# Version of the PowerShell engine to use when applied to a session
	# The acceptable values for this parameter are: 2.0 and 3.0.
	# If commented-out and newest version of PowerShell runs in the session.
	# The value of the PSVersion parameter of the Register-PSSessionConfiguration cmdlet takes
	# precedence over the value of the PowerShellVersion key in the session configuration file.
	# PowerShellVersion = '7.1.3'

	# Scripts to run when applied to a session
	# ScriptsToProcess = 'C:\ConfigData\InitScript1.ps1', 'C:\ConfigData\InitScript2.ps1'

	# Modules to import when applied to a session
	ModulesToImport = @(
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.Compatibility"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.ComputerInfo"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.Firewall"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.Initialize"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.IP"
		"C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.Logging"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.ProgramInfo"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.Remote"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.UserInfo"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.Utility"
		# "C:\dev\GitHub\WindowsFirewallRuleset\Modules\VSSetup"
	)

	# Aliases to make visible when applied to a session
	# VisibleAliases = "gt", "Add-WinPSModulePath"

	# Cmdlets to make visible when applied to a session
	# VisibleCmdlets = 'Invoke-Cmdlet1', @{ Name = 'Invoke-Cmdlet2';
	# Parameters = @{ Name = 'Parameter1'; ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }

	# Functions to make visible when applied to a session
	# VisibleFunctions = 'Invoke-Function1', @{ Name = 'Invoke-Function2'; Parameters = @{ Name = 'Parameter1';
	# ValidateSet = 'Item1', 'Item2' }, @{ Name = 'Parameter2'; ValidatePattern = 'L*' } }

	# External commands (scripts and applications) to make visible when applied to a session
	# VisibleExternalCommands = "C:\Windows\System32\gpupdate.exe"

	# Limits the PowerShell providers that are visible when applied to a session
	# Wildcard characters are supported.
	# By default, all providers that modules in the session export are visible in the session.
	# VisibleProviders = 'Item1', 'Item2'

	# Aliases to be defined when applied to a session
	# AliasDefinitions = @{ Name = 'Alias1'; Value = 'Invoke-Alias1'}, @{ Name = 'Alias2'; Value = 'Invoke-Alias2'}

	# Functions to define when applied to a session
	# FunctionDefinitions = @{ Name = 'MyFunction'; ScriptBlock = { param($MyInput) $MyInput } }

	# Variables to define when applied to a session
	# VariableDefinitions = @{ Name = 'Variable1'; Value = { 'Dynamic' + 'InitialValue' } },
	# @{ Name = 'Variable2'; Value = 'StaticInitialValue' }

	# Environment variables to define when applied to a session
	# EnvironmentVariables = @{ Variable1 = 'Value1'; Variable2 = 'Value2' }

	# Type files (.ps1xml) to load when applied to a session
	# TypesToProcess = 'C:\ConfigData\MyTypes.ps1xml', 'C:\ConfigData\OtherTypes.ps1xml'

	# Format files (.ps1xml) to load when applied to a session
	# FormatsToProcess = @(
	# 	"C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.ComputerInfo\Ruleset.ComputerInfo.Format.ps1xml"
	# 	"C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.IP\Ruleset.IP.Format.ps1xml"
	# 	"C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.ProgramInfo\Ruleset.ProgramInfo.Format.ps1xml"
	# 	"C:\dev\GitHub\WindowsFirewallRuleset\Modules\Ruleset.UserInfo\Ruleset.UserInfo.Format.ps1xml"
	# )

	# Assemblies to load when applied to a session
	# AssembliesToLoad = @(
	# 	"System.Data.Entity"
	# 	"Microsoft.Windows.Appx.PackageManager.Commands"
	# 	"Microsoft.WSMan.Management"
	# 	"System.DirectoryServices.AccountManagement"
	# )
}
