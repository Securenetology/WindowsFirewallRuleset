
<#
MIT License

This file is part of "Windows Firewall Ruleset" project
Homepage: https://github.com/metablaster/WindowsFirewallRuleset

Copyright (C) 2020 metablaster zebal@protonmail.ch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
#>

<#
.SYNOPSIS
Capture errors, warnings and infos generated by advanced functions and write logs

.DESCRIPTION
Errors, warnings and informational messages (streams) generated by Write-* commandlets within
advanced functions will be picked up by this function, formatted and then written to log files.

Update-Log can be called any amount of time within a script to update logs, but it must be the last
command in a script as well to flush any remaining streams.

Update-Log should be used only withing scripts, streams in module (module scope) are picked up
automatically by the script that calls module advanced functions.

If any of the 3 preferences are set to "Ignore" those won't be logged

.PARAMETER Path
If specified writes logs to this location

.EXAMPLE
PS> Some-AdvancedFunction
PS> Update-Log

Errors, warnings and Information messages generated by "Some-AdvancedFunction" will be logged to file

.EXAMPLE
PS> Some-AdvancedFunction | Another-AdvancedFunction
PS> Update-Log

Errors, warnings and Information messages generated by both functions will be logged to file

.INPUTS
None. You cannot pipe objects to Update-Log

.OUTPUTS
None. Update-Log does not generate any output

.NOTES
TODO: when strict mode is on, errors captured by strict mode are not captured into log buffers
#>
function Update-Log
{
	[CmdletBinding(SupportsShouldProcess = $true, ConfirmImpact = "Low",
		HelpURI = "https://github.com/metablaster/WindowsFirewallRuleset/blob/master/Modules/Ruleset.Logging/Help/en-US/Update-Log.md")]
	[OutputType([void])]
	param (
		[Parameter()]
		[SupportsWildcards()]
		[System.IO.DirectoryInfo] $Path = $LogsFolder
	)

	Write-Debug -Message "[$($MyInvocation.InvocationName)] params($($PSBoundParameters.Values))"

	Write-Verbose -Message "[$($MyInvocation.InvocationName)] Checking if there is data to write logs"
	$ErrorBuffer = $PSCmdlet.GetVariableValue("ErrorBuffer")
	$WarningBuffer = $PSCmdlet.GetVariableValue("WarningBuffer")
	$InfoBuffer = $PSCmdlet.GetVariableValue("InfoBuffer")

	# NOTE: It's possible to also separate other sources if needed
	if ((Get-PSCallStack)[1].ScriptName -like "$ProjectRoot\Test\*")
	{
		$Header = "Unit test generated "
		$Path = "$Path\Test"
	}
	else
	{
		$Header = "Script generated "
	}

	if ($PSCmdlet.ShouldProcess("Log files", "write to log files"))
	{
		if ($ErrorBuffer)
		{
			Write-Verbose -Message "[$($MyInvocation.InvocationName)] Processing Error message"

			$Preference = $PSCmdlet.GetVariableValue("ErrorActionPreference")
			Write-Debug -Message "[$($MyInvocation.InvocationName)] Caller ErrorActionPreference is: $Preference"

			if ($Preference -ne "SilentlyContinue")
			{
				Write-Verbose -Message "[$($MyInvocation.InvocationName)] Setting error status variable"
				Set-Variable -Name ErrorStatus -Scope Global -Value $true
			}

			if ($ErrorLogging)
			{
				$LogFile = Initialize-Log $Path -LogName "Error" -Header ($Header + "errors")

				if ($LogFile)
				{
					Write-Verbose -Message "[$($MyInvocation.InvocationName)] Appending error to log file: $LogFile"
					$ErrorBuffer | ForEach-Object {
						$_ | Select-Object * | Out-File -Append -FilePath $LogFile -Encoding $DefaultEncoding
					}
				}
			}

			Write-Debug -Message "[$($MyInvocation.InvocationName)] Clearing errors buffer"
			$ErrorBuffer.Clear()
		}

		if ($WarningBuffer)
		{
			Write-Verbose -Message "[$($MyInvocation.InvocationName)] Processing Warning message"

			$Preference = $PSCmdlet.GetVariableValue("WarningPreference")
			Write-Debug -Message "[$($MyInvocation.InvocationName)] Caller WarningPreference is: $Preference"

			if ($Preference -ne "SilentlyContinue")
			{
				Write-Verbose -Message "[$($MyInvocation.InvocationName)] Setting warning status variable"
				Set-Variable -Name WarningStatus -Scope Global -Value $true
			}

			if ($WarningLogging)
			{
				$LogFile = Initialize-Log $Path -LogName "Warning" -Header ($Header + "warnings")

				if ($LogFile)
				{
					Write-Verbose -Message "[$($MyInvocation.InvocationName)] Appending warnings to log file: $LogFile"

					# NOTE: we have to add the WARNING label, it's not included in the message by design
					# NOTE: Consistent encoding needed for cases where Core and Desktop editions
					# write to same file (not same encoding)
					$WarningBuffer | ForEach-Object {
						"WARNING: $(Get-Date -Format "HH:mm:ss") $_" |
						Out-File -Append -Encoding $DefaultEncoding -FilePath $LogFile
					}
				}
			}

			Write-Debug -Message "[$($MyInvocation.InvocationName)] Clearing warnings buffer"
			$WarningBuffer.Clear()
		}

		if ($InfoBuffer)
		{
			Write-Verbose -Message "[$($MyInvocation.InvocationName)] Processing Information message"

			if ($InformationLogging)
			{
				$LogFile = Initialize-Log $Path -LogName "Info" -Header ($Header + "information entries")

				if ($LogFile)
				{
					Write-Verbose -Message "[$($MyInvocation.InvocationName)] Appending information to log file: $LogFile"
					$InfoBuffer | ForEach-Object {
						$_ | Select-Object * | Out-File -Append -FilePath $LogFile -Encoding $DefaultEncoding
					}
				}
			}

			Write-Debug -Message "[$($MyInvocation.InvocationName)] Clearing information buffer"
			$InfoBuffer.Clear()
		}
	}
}
